<?xml version="1.0" encoding="UTF-8"?>

<!--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
-->

<faqs xmlns="http://maven.apache.org/FML/1.0.1"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://maven.apache.org/FML/1.0.1 http://maven.apache.org/xsd/fml-1.0.1.xsd"
      title="Code patterns" toplink="false">
  <part id="referencing">
    <title>Referencing</title>

    <faq id="axisOrder">
      <question>
        Never explicitely swap ordinates for axis order
      </question>
      <answer>
        <p>The <a href="modules/referencing/faq.html#axisOrder">axis order issue</a> causes lot of
        confusion, and developers are sometime tempted to swap their ordinate values in order to
        comply with some expected axis ordering. It should never be necessary, since the Apache SIS
        referencing engine manages axis order transparently - provided that the Coordinate Reference
        System (CRS) definition is accurate. If a code needs to swap ordinates, this is probably an
        indication that the CRS has not been properly defined. Instead than patching the coordinate
        values, try to make sure that the <em>Source CRS</em> (associated to the original data) and
        the <em>Target CRS</em> (the coordinate space where to perform the work) are properly defined,
        and let the referencing engine performs the conversion from the source to the target CRS.
        For example when fetching the CRS, make sure that the proper boolean value is given to the
        <code><a href="apidocs/org/apache/sis/referencing/CRS.html#decode%28java.lang.String,%20boolean%29">decode(String,
        boolean)</a></code> method.</p>
      </answer>
    </faq>
  </part>

  <part id="coverage">
    <title>Coverages</title>

    <faq id="gridToCRS">
      <question>
        Georeference images with affine transforms, <em>not</em> bounding boxes
      </question>
      <answer>
        <p>Many users define the geographic extent of an image by its corner locations.
        This approach is not sufficient as it does not specify if the (<var>x</var>,<var>y</var>)
        axes are interchanged (see the <a href="modules/referencing/faq.html#axisOrder">axis order
        issue</a>) or if the <var>y</var> axis is oriented downward. All images in SIS shall be
        georeferenced by at least an affine transform (more complex transforms are also possible),
        never by a rectangle or bounding box. In the two-dimensional case, the standard
        <code>java.awt.geom.AffineTransform</code> class can be used.</p>
      </answer>
    </faq>
  </part>

  <part id="database">
    <title>Database</title>

    <faq id="database-calendar">
      <question>
        Specify timezone with <code>ResultSet.getTimestamp(int, <em>Calendar</em>)</code>
      </question>
      <answer>
        <p>Geospatial data often cover a wide geographic area, spanning many time zones.
        When reading dates or timestamps from a <code>ResultSet</code>, always specify
        the expected time zone. It may not be the local time zone.</p>

        <p>A similar recommendation applies to usages of <code>java.text.DateFormat</code>
        and <code>java.util.Calendar</code>.</p>
      </answer>
    </faq>
  </part>

  <part id="international">
    <title>International</title>

    <faq id="spaces-in-sort">
      <question>
        Replace underscores by spaces before sorting
      </question>
      <answer>
        <p>Before to sort programmatic names for human reading, consider replacing all occurrences
        of the underscore character (<code>'_'</code>) by the space character (<code>' '</code>).
        The ASCII value of the underscore character is greater than <code>'Z'</code> but lower than
        <code>'a'</code>, which sometime produce unexpected sort results. For example
        <code>"Foo_bar"</code> is sorted <em>between</em> <code>"FooBar"</code> and <code>"Foobar"</code>.
        The space character produces more consistent sort results because its ASCII value is less
        than any printable character, so <code>"Foo bar"</code> is sorted before both
        <code>"FooBar"</code> and <code>"Foobar"</code>.</p>
      </answer>
    </faq>

    <faq id="unicode-loop">
      <question>
        Loop over character sequences using code points
      </question>
      <answer>
        <p>Since Java 1.5, characters are no longer restricted to 16 bits. Some "characters"
        are actually represented using two consecutive <code>char</code> elements. Those
        "characters" are called <cite>code points</cite>. Consequently, when iterating over
        characters in a string, the following pattern shall be used:</p>

        <table class="section"><tr><th>Do not use</th><th>Use instead</th></tr>
        <tr valign="top"><td><source>for (int i=0; i&lt;string.length(); i++) {
    char c = string.charAt(i);
    // ... do some stuff ...
}</source></td><td><source>for (int i=0; i&lt;string.length();) {
    final int c = string.codePointAt(i);
    // ... do some stuff ...
    i += Character.charCount(c);
}</source></td></tr></table>
      </answer>
    </faq>
  </part>
</faqs>
