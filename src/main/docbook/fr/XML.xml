<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book [
  <!ENTITY % book.entities SYSTEM "../book.entities">
  %book.entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0"
      xmlns:xlink = "http://www.w3.org/1999/xlink">

  <title>Représentation des objets en <acronym>XML</acronym></title>
  <para>
    Les objets définis par les standards <acronym>OGC</acronym>/<acronym>ISO</acronym>
    doivent pouvoir être échangés sur internet entre des machines distantes,
    utilisant des logiciels différents écrits dans des langages différents.
    Quelques uns des formats les plus connus sont
    le <acronym>WKT</acronym> (<foreignphrase>Well Known Text</foreignphrase>) et
    le <acronym>WKB</acronym> (<foreignphrase>Well Known Binary</foreignphrase>).
    Mais le format le plus exhaustif et souvent considéré comme la référence est le <acronym>XML</acronym>,
    au point où la façon de représenter les objets <acronym>ISO</acronym> dans ce format fait parfois l’objet d’un standard international à part entière.
    Ainsi, les classes de méta-données sont décrites dans le standard <acronym>ISO</acronym> 19115 (une spécification dite <firstterm>abstraite</firstterm>),
    alors que la représentation de ces classes en <acronym>XML</acronym> est décrite par le standard <acronym>ISO</acronym> 19139.
  </para>
  <para>
    Les différents standards <acronym>OGC</acronym>/<acronym>ISO</acronym> n’emploient pas tous la même stratégie
    pour exprimer les objets en <acronym>XML</acronym>.
    Le standard <acronym>ISO</acronym> 19139 en particulier emploie une approche plus verbeuse que les autres normes,
    et fera l’objet d’une section particulière.
    Mais la plupart des formats <acronym>XML</acronym> ont en commun de définir des types et des attributs supplémentaires
    qui ne font pas partie des spécifications abstraites d’origines.
    Ces attributs supplémentaires sont habituellement propres au <acronym>XML</acronym>
    et peuvent ne pas apparaître directement dans l’<acronym>API</acronym> de Apache <acronym>SIS</acronym>.
    Certains de ces attributs, notamment <literal role="OGC">gmd:id</literal>, <literal role="OGC">gco:uuid</literal>
    et <literal>xlink:href</literal>, restent toutefois accessibles sous forme de paires clé-valeurs.
  </para>
  <para>
    Les documents <acronym>XML</acronym> peuvent employer les préfixes de leur choix,
    mais les préfixes suivants sont couramment employés dans la pratique.
    Ils apparaissent donc par défaut dans les documents produits par Apache <acronym>SIS</acronym>.
    Ces préfixes sont définis dans la classe <classname role="SIS">org.apache.sis.xml.Namespaces</classname>.
  </para>
  <table frame="none">
    <title>Préfixes d’espaces de noms <acronym>XML</acronym> courants</title>
    <tgroup cols="2">
      <colspec colname="prefix"/>
      <colspec colname="namespace"/>
      <thead>
        <row>
          <entry>Préfixe</entry>
          <entry>Espace de nom</entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry><literal role="OGC">gco</literal></entry>
          <entry><literal>&xmlns-gco;</literal></entry>
        </row>
        <row>
          <entry><literal role="OGC">gfc</literal></entry>
          <entry><literal>&xmlns-gfc;</literal></entry>
        </row>
        <row>
          <entry><literal role="OGC">gmd</literal></entry>
          <entry><literal>&xmlns-gmd;</literal></entry>
        </row>
        <row>
          <entry><literal role="OGC">gmi</literal></entry>
          <entry><literal>&xmlns-gmi;</literal></entry>
        </row>
        <row>
          <entry><literal role="OGC">gmx</literal></entry>
          <entry><literal>&xmlns-gmx;</literal></entry>
        </row>
        <row>
          <entry><literal role="OGC">gml</literal></entry>
          <entry><literal>&xmlns-gml;</literal></entry>
        </row>
        <row>
          <entry><literal>xlink</literal></entry>
          <entry><literal>&xmlns-xlink;</literal></entry>
        </row>
      </tbody>
    </tgroup>
  </table>

  <sidebar>
    <title>Outils de lecture et d’écriture de documents <acronym>XML</acronym></title>
    <para>
      Apache <acronym>SIS</acronym> emploie différentes bibliothèques pour lire et écrire différents type d’objets.
      La bibliothèque utilisée dépend de la complexité de l’objet et des contraintes de performances.
      Par exemple les annotations de <acronym>JAXB</acronym> ont l’avantage d’être proches du code,
      ce qui facilite la maintenance de la correspondance entre le Java et le <acronym>XML</acronym>.
      En revanche <acronym>SAX</acronym> a l’avantage d’être performant.
      De manière générale, Apache <acronym>SIS</acronym> emploie:
    </para>
    <itemizedlist>
      <listitem>
        <acronym>JAXB</acronym> pour les objets écrits en relativement peu d’exemplaires
        mais dont la structure est complexe, avec des arborescences profondes.
        L’ensemble des méta-données <acronym>ISO</acronym> 19139 est un exemple typique.
      </listitem>
      <listitem>
        <acronym>SAX</acronym> pour les objets relativement simples mais pouvant exister en très grand nombre.
        L’ensemble des points dans une géométrie est un exemple typique.
      </listitem>
      <listitem>
        <acronym>DOM</acronym> comme une alternative à <acronym>JAXB</acronym>
        lorsque les éléments <acronym>XML</acronym> ne correspondent pas directement à des attributs Java.
        Les <foreignphrase>features</foreignphrase> en sont un exemple, car leur structure est dynamique.
      </listitem>
    </itemizedlist>
  </sidebar>

  <section>
    <title>Représentation des méta-données selon <acronym>ISO</acronym> 19139</title>
    <para>
      Pour chaque classe de méta-donnée, il existe un type <acronym>XML</acronym> nommé comme dans la spécification abstraite
      (par exemple <classname role="OGC">gmd:MD_Metadata</classname> et <classname role="OGC">gmd:CI_Citation</classname>).
      Tous ces types peuvent être employés comme racine d’un document <acronym>XML</acronym>.
      Ainsi, il est possible d’écrire un document représentant un objet <classname role="OGC">MD_Metadata</classname> complet,
      ou d’écrire un document représentant seulement un objet <classname role="OGC">CI_Citation</classname>.
    </para>
    <para>
      Le standard <acronym>ISO</acronym> 19139 dispose le contenu de ces objets d’une manière inhabituelle:
      pour chaque attribut dont le type est lui-même une autre classe du standard <acronym>ISO</acronym> 19139,
      l’attribut est enveloppé dans un élément qui représente son type plutôt que d’être écrit directement.
      Par exemple dans un objet de type <classname role="OGC">gmd:CI_Citation</classname>,
      l’attribut <function role="OGC">gmd:citedResponsibleParty</function>
      est enveloppé dans un élément <classname role="OGC">gmd:CI_ResponsibleParty</classname>.
      Cette pratique double la profondeur de l’arborescence, en introduisant une duplication
      à tous les niveaux pour chaque attribut, comme dans l’exemple suivant:
    </para>
    <example>
      <title>Redondance dans la représentation <acronym>XML</acronym> d’une méta-donnée</title>
      <programlisting language="xml">&lt;gmd:MD_Metadata&gt;
  &lt;gmd:identificationInfo&gt;
    &lt;gmd:MD_DataIdentification&gt;
      &lt;gmd:citation&gt;
        &lt;gmd:CI_Citation&gt;
          &lt;gmd:citedResponsibleParty&gt;
            &lt;gmd:CI_ResponsibleParty&gt;
              &lt;gmd:contactInfo&gt;
                &lt;gmd:CI_Contact&gt;
                  &lt;gmd:onlineResource&gt;
                    &lt;gmd:CI_OnlineResource&gt;
                      &lt;gmd:linkage&gt;
                        &lt;gmd:URL&gt;http://www.opengeospatial.org&lt;/gmd:URL&gt;
                      &lt;/gmd:linkage&gt;
                    &lt;/gmd:CI_OnlineResource&gt;
                  &lt;/gmd:onlineResource&gt;
                &lt;/gmd:CI_Contact&gt;
              &lt;/gmd:contactInfo&gt;
            &lt;/gmd:CI_ResponsibleParty&gt;
          &lt;/gmd:citedResponsibleParty&gt;
        &lt;/gmd:CI_Citation&gt;
      &lt;/gmd:citation&gt;
    &lt;/gmd:MD_DataIdentification&gt;
  &lt;/gmd:identificationInfo&gt;
&lt;/gmd:MD_Metadata&gt;</programlisting>
    </example>
    <sidebar>
      <title>Stratégie d’implémentation dans Apache <acronym>SIS</acronym></title>
      <para>
        Les paquets <literal role="SIS">org.apache.sis.internal.jaxb.*</literal> (non-publiques)
        définissent des adaptateurs JAXB pour tous les types d’objet <acronym>ISO</acronym>.
        Ces adaptateurs sont de toute façon nécessaires pour permettre à <acronym>JAXB</acronym>
        d’obtenir les classes <acronym>SIS</acronym> implémentant les interfaces de GeoAPI.
        De manière opportuniste, <acronym>SIS</acronym> en fait à la fois des adaptateurs <acronym>JAXB</acronym>
        et des objets englobants le “vrai” objet à lire ou écrire.
        Cette utilisation double permet d’éviter d’avoir à doubler le nombre de classes
        (déjà très élevé) présents dans les paquets internes.
      </para>
    </sidebar>

    <section>
      <title>Identification d’instances déjà définies</title>
      <para>
        L’élément englobant peut contenir un attribut <literal role="OGC">gmd:id</literal>,
        <literal role="OGC">gco:uuid</literal> ou <literal>xlink:href</literal>.
        Si un de ces attributs est présent, l’élément englobé peut être complètement omis;
        il sera remplacé au moment de la lecture par l’élément référencé par l’attribut.
        Le choix de l’attribut à utiliser dépend de la portée de l’élément référencé:
      </para>
      <itemizedlist>
        <listitem>
          <literal role="OGC">gmd:id</literal> n’est valide qu’à l’intérieur du document <acronym>XML</acronym>
          qui définit l’objet ainsi référencé.
        </listitem>
        <listitem>
          <literal role="OGC">gco:uuid</literal> peut être valide à l’extérieur du document <acronym>XML</acronym>,
          mais quelqu’un doit maintenir une base de données fournissant les objets pour chaque <acronym>UUID</acronym> donnés.
        </listitem>
        <listitem>
          <literal>xlink:href</literal> peut faire référence à un autre document <acronym>XML</acronym> accessible sur internet.
        </listitem>
      </itemizedlist>
      <para>
        Dans la bibliothèque <acronym>SIS</acronym>, tous les objets susceptibles d’être identifiés dans un document <acronym>XML</acronym>
        implémentent l’interface <classname role="SIS">org.apache.sis.xml.IdentifiedObject</classname>.
        Chaque instance de cette interface fournit une vue de ses identifiants sous forme de <classname>Map&lt;Citation,String&gt;</classname>,
        dans lequel la clé <classname role="GeoAPI">Citation</classname> identifie le type d’identifiant et la valeur est l’identifiant lui-même.
        Quelques constantes représentant différents types d’identifiants sont énumérées dans <classname role="SIS">IdentifierSpace</classname>,
        notamment <constant role="SIS">ID</constant>, <constant role="SIS">UUID</constant> et <constant role="SIS">HREF</constant>.
        Chacune de ces clés peut être associée à une valeur d’un type différent (habituellement <classname>String</classname>,
        <classname>UUID</classname> ou <classname>URI</classname>) selon la clé.
        Par exemple le code suivant définit une valeur pour l’attribut <literal role="OGC">gco:uuid</literal>:
      </para>
      <example>
        <title>Associer un identifiant <literal role="OGC">gco:uuid</literal> à une méta-donnée</title>
        <programlisting language="java">import org.apache.sis.metadata.iso.DefaultMetadata;
import org.apache.sis.xml.IdentifierSpace;
import java.util.UUID;

public class MyClass {
    public void myMethod() {
        UUID identifier = UUID.randomUUID();
        DefaultMetadata metadata = new DefaultMetadata();
        metadata.getIdentifierMap().putSpecialized(IdentifierSpace.UUID, identifier);
    }
}</programlisting>
      </example>
      <para>
        Bien que ce mécanisme aie été définit dans le but de mieux supporter les représentations de méta-données en <acronym>XML</acronym>,
        il permet aussi de manière opportuniste de manipuler d’autres types d’identifiants.
        Par exemple les attributs <function role="GeoAPI">ISBN</function> et <function role="GeoAPI">ISSN</function>
        de <classname role="GeoAPI">Citation</classname> peuvent être manipulés de cette manière.
        Les méthodes de l’interface <classname role="SIS">IdentifiedObject</classname> fournissent donc un endroit unique
        où peuvent être manipulés tous types d’identifiants (pas seulement <acronym>XML</acronym>) associés à un objet.
      </para>
    </section>

    <section>
      <title>Représentation de valeurs manquantes</title>
      <para>
        Lorsqu’un attribut n’est pas défini, la méthode correspondante de GeoAPI retourne généralement <literal>null</literal>.
        Toutefois les choses se compliquent lorsque l’attribut manquant est une valeur considérée comme obligatoire par le standard <acronym>ISO</acronym> 19115.
        Le standard <acronym>ISO</acronym> 19139 autorise l’omission d’attributs obligatoires à la condition d’indiquer pourquoi la valeur est manquante.
        Les raisons peuvent être que l’attribut ne s’applique pas (<constant role="OGC">inapplicable</constant>),
        que la valeur existe probablement mais n’est pas connue (<constant role="OGC">unknown</constant>),
        que la valeur pourrait ne pas exister (<constant role="OGC">missing</constant>),
        qu’elle ne peut pas être divulguée (<constant role="OGC">withheld</constant>), <foreignphrase>etc.</foreignphrase>
        La transmission de cette information nécessite l’utilisation d’un objet non-nul même lorsque la valeur est manquante.
        <acronym>SIS</acronym> procède en retournant un objet qui, en plus d’implémenter l’interface GeoAPI attendue,
        implémente aussi l’interface <classname role="SIS">org.apache.xml.NilObject</classname>.
        Cette interface marque les instances dont toutes les méthodes retournent une collection vide,
        un tableau vide, <literal>null</literal>, <literal>NaN</literal>, <literal>0</literal> ou <literal>false</literal>,
        dans cet ordre de préférence selon ce que les types de retours des méthodes permettent.
        Chaque instance implémentant <classname role="SIS">NilObject</classname> fournit une méthode
        <classname role="SIS">getNilReason()</classname> indiquant pourquoi l’objet est nul.
      </para>
      <para>
        Dans l’exemple suivant, la partie gauche montre un élément <classname role="OGC">CI_Citation</classname>
        contenant un élément <classname role="OGC">CI_Series</classname>, alors que dans la partie droite la série est inconnue.
        Si l’élément <classname role="OGC">CI_Series</classname> avait été complètement omis
        (ce qui est illégal selon les standards <acronym>ISO</acronym> mais toléré par <acronym>SIS</acronym>),
        alors la méthode <function role="GeoAPI">Citation.getSeries()</function> retournerait <literal>null</literal> en Java.
        Mais en présence d’un attribut <literal role="OGC">nilReason</literal>, l’implémentation <acronym>SIS</acronym>
        de <function role="SIS">getSeries()</function> retournera plutôt un objet implémentant à la fois les interfaces
        <classname role="GeoAPI">Series</classname> et <classname role="SIS">NilReason</classname>,
        et dont la méthode <function role="SIS">getNilReason()</function> retournera la constante <constant role="SIS">UNKNOWN</constant>.
      </para>
      <example>
        <title>Élément obligatoire marqué comme inconnu dans une méta-donnée</title>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="50%"/>
            <colspec colwidth="50%"/>
            <tbody>
              <row>
                <entry>
                  <programlisting language="xml">&lt;gmd:CI_Citation&gt;
  &lt;gmd:series&gt;
    &lt;gmd:CI_Series&gt;
      &lt;!-- Some content here --&gt;
    &lt;/gmd:CI_Series&gt;
  &lt;/gmd:series&gt;
&lt;/gmd:CI_Citation&gt;</programlisting>
                </entry>
                <entry>
                  <programlisting language="xml">&lt;gmd:CI_Citation&gt;
  &lt;gmd:series nilReason="unknown"/&gt;
&lt;/gmd:CI_Citation&gt;</programlisting>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </example>
    </section>
  </section>
</chapter>
